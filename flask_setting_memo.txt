

*가상환경 세팅
$ python3 -m venv .venv

*가상환경 실행
$ . .venv/Scripts/activate

flask 설치
$ pip install flask

== flask run 과 python app.py 의 차이점
= flask run은 프로젝트 구조를 모두 먼저 읽고 구동되는 것이라 flask 에서 제공하는 모든 기능을 사용할 수 있다.
= 대표적 차이점으로는 python app.py로 실행하면 코드를 수정할 때 마다 실행 중인 프로그램을 재시작 해야 하지만
= flask run은 코드를 수정 후 저장만으로 바로 적용이 된다.


requirements.txt 파일 만들기 
$ pip freeze > requirements.txt

*requirements.txt 모듈 자동 설치
$ pip install -r requirements.txt

== requirements.txt 이란
= 가상환경에서 설치된 모듈을 관리? 한방에 보는 파일로 위 명령어를 사용해 생성할 수 있다.
= requirements.txt 을 이용하면 다른 피씨의 환경에서도 같은 가상환경과 모듈을 내려받아 동일한 환경이 된다.

== .gitignore 
= .gitignore 에 파일 경로 혹은 파일명을 작성하면 해당 파일은 형상관리를 하지 않는다.
= 대표적으로는 .venv/ 와 같은 가상환경은 형상 관리를 하지 않는다.


== export FLASK_APP=app.py
= Flask 애플리케이션의 진입점(entry point)이 되는 파일 이름을 설정
== export FLASK_ENV=development
= Flask 애플리케이션의 실행 환경을 설정
== export FLASK_DEBUG=1
=  Flask 애플리케이션을 디버그 모드로 실행, 코드 변경 시 자동으로 감지하여 서버를 재시작 됨


== flask db init
= 데이터베이스 마이그레이션에 필요한 초기 파일들을 생성
== flask db migrate
= 현재 데이터베이스 상태와 모델 정의 사이의 차이를 확인, 변경 내용이 있는 경우 실행
== flask db upgrade
= 데이터베이스 스키마를 업그레이드, 실제로 적용
